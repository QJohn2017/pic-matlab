function h5write_trajs_update(filePath,tr_id,field,data)
% H5WRITE_TRAJS_UPDATE Update part of data h5 file.
% H5WRITE_TRAJS_UPDATE(h5FilePath,tr_id,field,data)
% 
% dirData - directory of data
% h5FilePath - directory and file name
% structure_trajectories - structure array with needed trajectory
%     information

h5exist = 0;
if exist(filePath,'file')
  h5exist = 1;
  disp(sprintf('File %s exists. Loading file to obtain existing times.',filePath))
  traj = PICTraj(filePath);
else
  % do i need to initialize something? dont remember
  %h5writeatt(filePath,'/','software','micPIC')
end

doAppend = 1; % for future

m = 1; % hardcoded for now, need to change
q = 1;

iTr0 = traj.ntr; % add number to append correctly.


  iTr_str = sprintf('%06.0f',tr_id);
  group_name = ['/traj/' iTr_str '/'];
  
  %continue
  %
  
  h5create(filePath, [group_name 't'], size(tr.t));
  %catch
  %warning('h5 structure %s already exists',[group_name 't'])      
  %end
  
  
  h5create(filePath, [group_name 'x'], size(tr.t));  
  h5create(filePath, [group_name 'y'], size(tr.t));
  h5create(filePath, [group_name 'z'], size(tr.t));
  h5create(filePath, [group_name 'vx'], size(tr.t));
  h5create(filePath, [group_name 'vy'], size(tr.t));
  h5create(filePath, [group_name 'vz'], size(tr.t));
  h5create(filePath, [group_name 'Ex'], size(tr.t));  
  h5create(filePath, [group_name 'Ey'], size(tr.t));
  h5create(filePath, [group_name 'Ez'], size(tr.t));
  h5create(filePath, [group_name 'Bx'], size(tr.t));
  h5create(filePath, [group_name 'By'], size(tr.t));
  h5create(filePath, [group_name 'Bz'], size(tr.t));
  
  h5write(filePath, [group_name 't'], tr.t);
  h5write(filePath, [group_name 'x'], tr.x);
  h5write(filePath, [group_name 'y'], tr.y);
  h5write(filePath, [group_name 'z'], tr.z);
  h5write(filePath, [group_name 'vx'], tr.vx);
  h5write(filePath, [group_name 'vy'], tr.vy);
  h5write(filePath, [group_name 'vz'], tr.vz);
  h5write(filePath, [group_name 'Ex'], Ex);
  h5write(filePath, [group_name 'Ey'], Ey);
  h5write(filePath, [group_name 'Ez'], Ez);
  h5write(filePath, [group_name 'Bx'], Bx);
  h5write(filePath, [group_name 'By'], By);
  h5write(filePath, [group_name 'Bz'], Bz);
    
  h5writeatt(filePath, group_name,'t0', tr.t0); % tr.t0
  h5writeatt(filePath, group_name,'x0', tr.x0);
  h5writeatt(filePath, group_name,'y0', tr.y0);
  h5writeatt(filePath, group_name,'z0', tr.z0);
  h5writeatt(filePath, group_name,'vx0', tr.vx0);
  h5writeatt(filePath, group_name,'vy0', tr.vy0);
  h5writeatt(filePath, group_name,'vz0', tr.vz0);  
  h5writeatt(filePath, group_name,'m', m);
  h5writeatt(filePath, group_name,'q', q);
  %h5writeatt(filePath, group_name,'tags', tags);
  h5writeatt(filePath, group_name,'fpeaks_f', fpeaks_info.f);
  h5writeatt(filePath, group_name,'fpeaks_x', fpeaks_info.x);
  h5writeatt(filePath, group_name,'fpeaks_z', fpeaks_info.z);
  h5writeatt(filePath, group_name,'fpeaks_x1', fpeaks_info.x1);
  h5writeatt(filePath, group_name,'fpeaks_z1', fpeaks_info.z1);  
  h5writeatt(filePath, group_name,'fpeaks_x2', fpeaks_info.x2);
  h5writeatt(filePath, group_name,'fpeaks_z2', fpeaks_info.z2);
  h5writeatt(filePath, group_name,'fpeaks_spacingPeaks', fpeaks_info.spacingPeaks);
  h5writeatt(filePath, group_name,'fpeaks_nPeaks', fpeaks_info.nPeaks);
  h5writeatt(filePath, group_name,'fpeaks_iPeak', fpeaks_info.iPeak);
  h5writeatt(filePath, group_name,'fpeaks_simIteration', fpeaks_info.iteration);
  h5writeatt(filePath, group_name,'RelTol', tr.options.RelTol);
  h5writeatt(filePath, group_name,'AbsTol', tr.options.AbsTol);
    
disp('Done.')